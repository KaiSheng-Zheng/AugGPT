import java.util.ArrayList;


public class CourseManager {
    private ArrayList<Course> courses;
    private ArrayList<Student> students;
    private boolean IfOpen;
    int before = 100;

    public ArrayList<Course> getCourses() {
        return courses;
    }

    public ArrayList<Student> getStudents() {
        return students;
    }

    public boolean getIfOpen() {
        return IfOpen;
    }

    public void setIfOpen(boolean ifOpen) {
        IfOpen = ifOpen;
    }
    public void addCourse(Course course){
        this.courses.add(course);
        course.setCourseManager(this);
    }
    public void addStudent(Student student){
        this.students.add(student);
        student.setCourseManager(this);
    }
    public boolean enrollStudentInCourse(Student student,String courseId, int credits){
        if (student.getCredits()< credits){return false;}
        if (!this.IfOpen){
            return false;
        }
        if (credits<=0){
            return false;
        }
        Course course = null;
        for (Course c : courses){
            if (c.getCourseID().equals(courseId)){
                course = c;
                break;
            }
            else {continue;}
        }
        if (course == null){
            return false;
        }
        Course course1 = null;
        for (Course c : courses){
            if (student.getEnrollCourses().contains(courseId)){
                course1 = c;
                break;
            }
            else {continue;}
        }
        if (course1 == null){
            return false;
        }
        course.getEnrollStudent().add(student);
        course.getCredits().add(credits);
        student.getEnrollCourses().add(course);
        student.setCredits(before = before - credits);
        return true;
    }
    public boolean modifyStudentEnrollmentCredits(Student student,String courseId,int credits){
        Course course = null;
        int index = -1;
        for (int i = 0; i < course.getEnrollStudent().size(); i++){
            if (student.getStudentID().equals(course.getEnrollStudent().get(i).getStudentID())){
                index = i;
                break;
            }
        }
        int originalCredits = course.getCredits().get(index);
        if (!this.IfOpen){
            return false;
        }
        for (Course c : courses){
            if (c.getCourseID().equals(courseId)){
                course = c;
                break;
            }
            else {continue;}
        }
        if (course == null){
            return false;
        }
        Course course1 = null;
        for (Course c : courses){
            if (student.getEnrollCourses().contains(courseId)){
                course1 = c;
                break;
            }
            else {continue;}
        }
        if (student.getCredits() + originalCredits < credits){
            return false;
        }
        student.setCredits(student.getCredits()+originalCredits-credits);
        course.getCredits().set(index, credits);
        return true;
    }
    public boolean dropStudentEnrollmentCourse(Student student,String courseId){
        Course course = null;
        if (!this.IfOpen){
            return false;
        }
        for (Course c : courses){
            if (c.getCourseID().equals(courseId)){
                course = c;
                break;
            }
            else {continue;}
        }
        if (course == null){
            return false;
        }
        Course course1 = null;
        for (Course c : courses){
            if (student.getEnrollCourses().contains(courseId)){
                course1 = c;
                break;
            }
            else {continue;}
        }
        if (course1 == null){
            return false;
        }
        Integer index = -1;
        for (int i = 0; i < course.getEnrollStudent().size(); i++){
            if (student.getStudentID().equals(course.getEnrollStudent().get(i).getStudentID())){
                index = i;
                break;
            }
        }
        int drop = course.getCredits().get(index);
        course.getEnrollStudent().remove(index);
        course.getCredits().remove(index);
        student.getEnrollCourses().remove(index);
        student.setCredits(student.getCredits()+drop);
        return true;
    }
    public CourseManager (){
        courses = new ArrayList<>();
        students = new ArrayList<>();
        IfOpen = true;
    }
    public ArrayList<String> getEnrolledCoursesWithCredits(Student student){
        if (!this.IfOpen){return null;}
        ArrayList<String> getenrolledcoursewithcredits = new ArrayList<String>();
        ArrayList<Course> enrolled = new ArrayList<Course>();
        ArrayList<Integer> credit = new ArrayList<Integer>();
        for (Course c : courses){
            for (int j = 0; j < c.getEnrollStudent().size()-1;j++){
            if (c.getEnrollStudent().get(j).equals(student)){
                enrolled.add(c);
                Course course = null;
                int index = -1;
                for (int i = 0; i < course.getEnrollStudent().size(); i++){
                    if (student.getStudentID().equals(course.getEnrollStudent().get(i).getStudentID())){
                        index = i;
                        break;
                    }
                }
                credit.add(c.getCredits().indexOf(index));
            }
            else {continue;}
        }}
        for (int index = 0;index < enrolled.size();index++){
        getenrolledcoursewithcredits.add(enrolled.get(index)+": "+Integer.toString(credit.get(index)));
        }
        return getenrolledcoursewithcredits;
    }
    public void finalizeEnrollments(){
        IfOpen = false;
        for (Course c : courses){
                for (int i = 0; i < c.getEnrollStudent().size(); i++){
                    for (int index = 0; index < c.getEnrollStudent().size(); index++){
                        if (c.getCredits().get(index)<c.getCredits().get(index+1)){
                            Student a = c.getEnrollStudent().get(index);
                            int b = c.getCredits().get(index);
                            c.getEnrollStudent().set(index,c.getEnrollStudent().get(index+1));
                            c.getCredits().set(index,c.getCredits().get(index+1));
                            c.getEnrollStudent().set(index+1,a);
                            c.getCredits().set(index+1,b);
                        }
                    }
            }
        }
        for (Course c : courses){
            if (c.getCredits().get(c.getMaxCapacity()-1).equals(c.getCredits().get(c.getMaxCapacity()))){
                for (int index = c.getEnrollStudent().size()-1;index >= 0;index--){
                    if (c.getCredits().get(index)<=c.getCredits().get(c.getMaxCapacity())){
                        c.getCredits().remove(index);
                        c.getEnrollStudent().remove(index);
                    }
                }
            }
            else{
                for (int index = c.getEnrollStudent().size()-1;index >=c.getMaxCapacity();index--){
                    c.getCredits().remove(index);
                    c.getEnrollStudent().remove(index);
                }
            }
        }
        for (Course c : courses){
            for (int index = 0;index < c.getEnrollStudent().size()-1;index++){
                c.getSuccessStudents().add(c.getEnrollStudent().get(index));
            }
        }

        for (Student s : students){
            for (int index = 0;index < s.getEnrollCourses().size();index++){
                s.getSuccessCourses().add(s.getEnrollCourses().get(index));
            }
        }
    }
}
