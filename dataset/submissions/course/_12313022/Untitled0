import java.util.ArrayList;

public class Main {
    private ArrayList<Course> courses;
    private ArrayList<Student> students;
    private boolean ifOpen;

    public CourseManager() {
        this.courses = new ArrayList<>();
        this.students = new ArrayList<>();
        this.ifOpen = true;
    }

    public ArrayList<Student> getStudents() {
        return students;
    }

    public ArrayList<Course> getCourses() {
        return courses;
    }

    public void setIfOpen(Boolean ifOpen) {
        this.ifOpen = ifOpen;
    }

    public boolean getIfOpen() {
        return ifOpen;
    }

    public void addCourse(Course course) {
        courses.add(course);
        course.setCourseManager(this);
    }

    public void addStudent(Student student) {
        students.add(student);
        student.setCourseManager(this);
    }

    public boolean enrollStudentInCourse(Student student, String courseId, int credits) {
        if (!ifOpen) return false;

        Course course = findCourseById(courseId);
        if (course == null || student.getEnrollCourses().contains(course) || credits <= 0 || credits > student.getCredits()) {
            return false;
        }

        student.getEnrollCourses().add(course);
        course.getEnrollStudent().add(student);
        student.setCredits(student.getCredits() - credits);
        course.getCredits().add(credits);

        return true;
    }

    public boolean modifyStudentEnrollmentCredits(Student student, String courseId, int credits) {
        if (!ifOpen) return false;

        Course course = findCourseById(courseId);
        if (course == null || !student.getEnrollCourses().contains(course) || credits <= 0 || credits > student.getCredits()) {
            return false;
        }

        int index = student.getEnrollCourses().indexOf(course);
        course.getCredits().set(index, credits);
        student.setCredits(student.getCredits() - (credits - course.getCredits().get(index)));

        return true;
    }

    public boolean dropStudentEnrollmentCourse(Student student, String courseId) {
        if (!ifOpen) return false;

        Course course = findCourseById(courseId);
        if (course == null || !student.getEnrollCourses().contains(course)) {
            return false;
        }

        int index = student.getEnrollCourses().indexOf(course);
        student.getEnrollCourses().remove(index);
        int refundedCredits = course.getCredits().remove(index);
        student.setCredits(student.getCredits() + refundedCredits);

        return true;
    }

    public void finalizeEnrollments() {
        ifOpen = false;
        for (Course course : courses) {
            course.finalizeEnrollment();
        }
    }

    public ArrayList<String> getEnrolledCoursesWithCredits(Student student) {
        if (ifOpen) return null;

        ArrayList<String> enrolledCoursesWithCredits = new ArrayList<>();
        for (int i = 0; i < student.getEnrollCourses().size(); i++) {
            Course course = student.getEnrollCourses().get(i);
            int credits = course.getCredits().get(i);
            enrolledCoursesWithCredits.add(course.getCourseID() + ": " + credits);
        }

        return enrolledCoursesWithCredits;
    }

    private Course findCourseById(String courseId) {
        for (Course course : courses) {
            if (course.getCourseID().equals(courseId)) {
                return course;
            }
        }
        return null;
    }
}