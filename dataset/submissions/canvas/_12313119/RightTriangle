public class RightTriangle extends Shape {
    private int width;
    private int height;
    private final Direction d;

    //public RightTriangle(Location location, char pattern, int width, int height,
//Direction d);
    public RightTriangle(Location location, char pattern, int width, int height, Direction d) {
        super(location, pattern);
        this.d = d;
        this.height = height;
        this.width = width;
        this.fillGrids();
    }


    @Override
    public void fillGrids() {
        double doubletypeHeight = height;
        double doubletypeWeidth = width;
        char[][] temp = new char[height][width];
        for (int i = 0; i < height; i++) {
            for (int i1 = 0; i1 < width; i1++) {
                temp[i][i1] = ' ';
            }
        }
        double slope = 0;
        switch (d) {
            case LEFT_DOWN:
                slope = -doubletypeHeight / doubletypeWeidth;
                for (int i = 1; i < height+1 ; i++) {
                    for (int j = 0; j < width; j++) {
                        if (doubletypeHeight - i <slope * j + height) {
                            temp[i - 1][j] = this.pattern;
                        }
                    }
                }
                break;
            case LEFT_UP:
                slope = doubletypeHeight / doubletypeWeidth;
                for (int i = 0; i < height; i++) {
                    for (int j = 0; j < width; j++) {
                        if (doubletypeHeight - i > j * slope) {
                            temp[i][j] = this.pattern;
                        }
                    }
                }
                break;
            case RIGHT_UP:
                slope = -doubletypeHeight / doubletypeWeidth;
                for (int i = 0; i < height; i++) {
                    for (int j = 1; j < width+1; j++) {
                        if (doubletypeHeight - i > slope * j + height) {
                            temp[i][j - 1] = this.pattern;
                        }
                    }
                }
                break;
            case RIGHT_DOWN:
                slope = doubletypeHeight / doubletypeWeidth;
                for (int i = 1; i < height+1; i++) {
                    for (int j = 1; j < width+1; j++) {
                        if (doubletypeHeight - i <j * slope) {
                            temp[i - 1][j - 1] = this.pattern;
                        }
                    }
                }
                break;

        }
        this.grids = temp;

    }

    @Override
    public void enlarge() {
        width++;
        height++;
        fillGrids();
    }

    @Override
    public void shrink() {
        width--;
        height--;
        fillGrids();
    }

    @Override
    public int area() {
        int number = 0;
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                if (grids[i][j] == pattern) {
                    number++;
                }
            }
        }
        return number;
    }

    public String toString() {
        return String.format("RightTriangle: (%d,%d) area=%d pattern=%c", location.getX(), location.getY(), area(), pattern);
    }
}
